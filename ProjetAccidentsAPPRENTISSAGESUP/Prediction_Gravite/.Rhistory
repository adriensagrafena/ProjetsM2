vehic$motor <- as.factor(vehic$motor)
## Base usagers
# catégorie de l'usager
usagers$catu <- as.factor(usagers$catu)
# gravité de l'accident
usagers$grav <- as.factor(usagers$grav)
# sexe
usagers$sexe <- as.factor(usagers$sexe)
# type de trajet
usagers$trajet <- as.factor(usagers$trajet)
### Valeurs manquantes et aberrantes
# Base caracteristiques
va <- which(carac$atm==-1)
va2 <- which(carac$col==-1)
va3 <-which(is.nan(carac$adr) | carac$adr=="-")
carac<-carac[-c(va, va2, va3),]
# Base lieux
ab <- which(lieux$vma<10 | lieux$vma==12 | lieux$vma==42 | lieux$vma>130)
lieux <- lieux[-c(ab),]
lieux$vma <- as.factor(lieux$vma)
lieux$surf <- str_replace_all(lieux$surf, pattern = "-1",
replacement = "9")
### Jointures
carac_lieux <- inner_join(carac,lieux,by="Num_Acc")
lieux_usagers <- inner_join(lieux,usagers,by="Num_Acc")
usagers_vehic <- inner_join(usagers,vehic,by="id_vehicule")
usagers_vehic <- inner_join(usagers,vehic,by="id_vehicule")
colnames(usagers_vehic)[1] <- "Num_Acc"
usagers_vehic <- usagers_vehic[,var_usagers_vehic]
var_usagers_vehic <- c("Num_Acc","id_vehicule","grav","catu","sexe","trajet","catv","obs","obsm","manv","motor")
usagers_vehic <- usagers_vehic[,var_usagers_vehic]
df <- inner_join(carac_lieux,usagers_vehic,by="Num_Acc")
df2 <- df
### Jointures
carac_lieux <- inner_join(carac,lieux,by="Num_Acc")
lieux_usagers <- inner_join(lieux,usagers,by="Num_Acc")
usagers_vehic <- inner_join(usagers,vehic,by="id_vehicule")
colnames(usagers_vehic)[1] <- "Num_Acc"
var_usagers_vehic <- c("Num_Acc","id_vehicule","grav","catu","sexe","trajet","catv","obs","obsm","manv","motor")
usagers_vehic <- usagers_vehic[,var_usagers_vehic]
df <- inner_join(carac_lieux,usagers_vehic,by="Num_Acc")
df2 <- df
### On passe de 4 à 3 modalités pour grav (hospitalisé et tué sont regroupés)
df2$grav[df2$grav=="2"] <- "3"
df2$grav[df2$grav=="4"] <- "2"
df2$grav <- factor(df2$grav,exclude=NULL)
df2$grav<-droplevels.factor(df2$grav)
### On supprime les identifiants, la date (saisonnalité déjà étudiée), le numéro d'immatriculation et commune
df2<-df2[,-c(1,2,5,20)]
### On passe de 4 à 3 modalités pour grav (hospitalisé et tué sont regroupés)
df2$grav[df2$grav=="2"] <- "3"
df2$grav[df2$grav=="4"] <- "2"
df2$grav <- factor(df2$grav,exclude=NULL)
df2$grav<-droplevels.factor(df2$grav)
### On supprime les identifiants, la date (saisonnalité déjà étudiée), le numéro d'immatriculation et commune
df2<-df2[,-c(1,2,5,20)]
View(df2)
set.seed(123)
red<-sample(1:130857, size = 10000, replace = FALSE)
dfred<-df2[red,]
View(dfred)
rownames(dfred)<-1:10000
set.seed(1654)
train_id <- sample(1:10000, size = 0.7*10000, replace = FALSE)
data_train <- dfred[train_id,]
data_test <- dfred[-train_id,]
modele.redtriv<-multinom(formula = grav ~ 1,data = data_train, model = TRUE, maxit = 600)
modele.redcomp<-multinom(formula = grav ~ .,data = data_train, model = TRUE, maxit = 600)
pred.moda.modele.redcomp<- predict(object = modele.redcomp , newdata = data_test)
erreur.modele.redcomp <- mean(!(pred.moda.modele.redcomp == data_test$grav))
erreur.modele.redcomp
modele.forward <- step(object = modele.redtriv,
scope = list(lower = grav ~ 1, upper = formula(modele.redcomp$model)),
direction = "forward",steps=10)
modele.forward
modele.forward <- step(object = modele.redtriv,
scope = list(lower = grav ~ 1, upper = formula(modele.redcomp$model)),
direction = "forward",steps=20)
modele.forward <- step(object = modele.redtriv,
scope = list(lower = grav ~ 1, upper = formula(modele.redcomp$model)),
direction = "forward",steps=20)
modele.forward
formula(modele.forward$model)
direction = "forward",steps=20)
modele.forward <- step(object = modele.redtriv,
scope = list(lower = grav ~ 1, upper = formula(modele.redcomp$model)),
direction = "forward",steps=20)
modele.forward <- step(object = modele.redtriv,
scope = list(lower = grav ~ 1, upper = formula(modele.redcomp$model)),
direction = "forward",steps=20)
modele.forward
formula(modele.forward$model)
modele.forward <- step(object = modele.redtriv,
scope = list(lower = grav ~ 1, upper = formula(modele.redcomp$model)),
direction = "forward",steps=30)
modele.forward
formula(modele.forward$model)
modele.redcomp<-multinom(formula = grav ~ .,data = dfred, model = TRUE, maxit = 600)   # pour info 22% d'erreur en testant sur base_test
modele.redtriv<-multinom(formula = grav ~ 1,data = dfred, model = TRUE, maxit = 600)
modele.forward <- step(object = modele.redtriv,
scope = list(lower = grav ~ 1, upper = formula(modele.redcomp$model)),
direction = "forward",steps=20)
gc()
getwd()
setwd("~/AccidentsRoutiers")
modele.redcomp<-multinom(formula = grav ~ .,data = dfred, model = TRUE, maxit = 600)   # pour info 22% d'erreur en testant sur une base_test de 7000
modele.redtriv<-multinom(formula = grav ~ 1,data = dfred, model = TRUE, maxit = 600)
modele.forward <- step(object = modele.redtriv,
scope = list(lower = grav ~ 1, upper = formula(modele.redcomp$model)),
direction = "forward",steps=20)
modele.forward
formula(modele.forward$model)
modele.forward <- step(object = modele.redtriv,
scope = list(lower = grav ~ 1, upper = formula(modele.redcomp$model)),
direction = "forward",steps=30)
modele.forward
formula(modele.forward$model)
modele.lourd<-multinom(formula = grav ~ .,data = df2, model = TRUE, maxit = 600)   # pour info 22% d'erreur en testant sur une base_test de 7000
modele.lourd<-multinom(formula = grav ~ 1,data = df2, model = TRUE, maxit = 600)
modele.forward <- step(object = modele.lourd,
scope = list(lower = grav ~ 1, upper = formula(modele.lourd$model)),
direction = "forward",steps=10)
modele.lourd<-multinom(formula = grav ~ .,data = df2, model = TRUE, maxit = 600)   # pour info 22% d'erreur en testant sur une base_test de 7000
modele.lourd<-multinom(formula = grav ~ 1,data = df2, model = TRUE, maxit = 600)
modele.forward <- step(object = modele.lourd,
scope = list(lower = grav ~ 1, upper = formula(modele.lourd$model)),
direction = "forward",steps=10)
modele.lourd
formula(modele.lourd$model)
modele.lourd$model
View(df2)
modele.lourd<-multinom(formula = grav ~ .,data = df2, model = TRUE, maxit = 600)   # pour info 22% d'erreur en testant sur une base_test de 7000
modele.lourdt<-multinom(formula = grav ~ 1,data = df2, model = TRUE, maxit = 600)
modele.forward <- step(object = modele.lourdt,
scope = list(lower = grav ~ 1, upper = formula(modele.lourd$model)),
direction = "forward",steps=10)
var <- c('grav','catv','catu','obsm','agg','col','obs','catr','sexe','manv','trajet','circ','situ',
'nbv','vma')
dtf <- df2[,var]
dtf <- df2[,var]
var <- c('grav','catv','catu','obsm','agg','col','obs','catr','sexe','manv','trajet','circ','situ',
'nbv','vma')
dtf <- df2[,var]
View(df)
dtf <- df[,var]
View(dtf)
### On passe de 4 à 3 modalités pour grav (hospitalisé et tué sont regroupés)
df2$grav[df2$grav=="2"] <- "3"
df2$grav[df2$grav=="4"] <- "2"
df2$grav <- factor(df2$grav,exclude=NULL)
df2$grav<-droplevels.factor(df2$grav)
### On supprime les identifiants, la date (saisonnalité déjà étudiée), le numéro d'immatriculation et commune
df2<-df2[,-c(1,2,5,20)]
View(df2)
### Import des données
carac <- read.csv2(file="~/AccidentsRoutiers/data/caracteristiques-2019.csv")
lieux <- read.csv2(file="~/AccidentsRoutiers/data/lieux-2019.csv")
usagers <- read.csv2(file="~/AccidentsRoutiers/data/usagers-2019.csv")
vehic <- read.csv2(file="~/AccidentsRoutiers/data/vehicules-2019.csv")
### Tri dans les variables
# Base caracteritisques
var_carac <- c("Num_Acc","jour","mois","hrmn","lum","com","agg","int","atm","col")
carac <- carac[,var_carac]
# Base lieux
var_lieux <- c("Num_Acc","catr","circ","nbv","vosp","prof",
"plan","surf","infra","situ","vma")
lieux <- lieux[,var_lieux]
# Base vehicule
var_vehic <- c("Num_Acc", "id_vehicule","catv","obs","obsm","manv","motor")
vehic <- vehic[,var_vehic]
# Base usagers
var_usagers <- c("Num_Acc","id_vehicule", "catu","grav",
"sexe","an_nais","trajet")
usagers <- usagers[,var_usagers]
### Formatage des données
## Base caracteristiques
# numero accident
carac$Num_Acc <- as.factor(carac$Num_Acc)
lieux$Num_Acc <- as.factor(lieux$Num_Acc)
vehic$Num_Acc <- as.factor(vehic$Num_Acc)
usagers$Num_Acc <- as.factor(usagers$Num_Acc)
# date
carac$date <- paste(carac$jour,carac$mois,"2019",sep="/")
carac$date <- as.Date(carac$date,format="%d/%m/%Y")
carac <- carac[,-c(2,3)]
carac <- relocate(carac,"date",.after="Num_Acc")
# heure
carac$hrmn <- as.factor(carac$hrmn)
carac$hrmn<-hour(strptime(carac$hrmn,format="%H:%M"))
carac$hrmn<- cut(carac$hrmn, breaks =0:24, labels = NULL,
include.lowest = TRUE, right = FALSE,
ordered_result = TRUE)
# lumiere
carac$lum <- as.factor(carac$lum)
# commune
carac$com <- as.factor(carac$com)
# agglomeration
carac$agg <- as.factor(carac$agg)
# intersection
carac$int <- as.factor(carac$int)
# météo
carac$atm <- as.factor(carac$atm)
# type de collision
carac$col <- as.factor(carac$col)
## Base lieux
# categorie de route
lieux$catr <- as.factor(lieux$catr)
# regime de circulation
lieux$circ <- as.factor(lieux$circ)
# nb de voies
lieux$nbv <- as.factor(lieux$nbv)
# voie reservée
lieux$vosp <- as.factor(lieux$vosp)
# déclivité
lieux$prof <- as.factor(lieux$prof)
# virage
lieux$plan <- as.factor(lieux$plan)
# etat de la surface
lieux$surf <- as.factor(lieux$surf)
# infrastructures
lieux$infra <- as.factor(lieux$infra)
# situation de l'accident
lieux$situ <- as.factor(lieux$situ)
## Base véhicules
# id vehicule
vehic$id_vehicule <- as.factor(vehic$id_vehicule)
# catégorie du véhicule
vehic$catv <- as.factor(vehic$catv)
# obstacle fixe heurté
vehic$obs <- as.factor(vehic$obs)
# obstacle mobile heurté
vehic$obsm <- as.factor(vehic$obsm)
# manoeuvre avant l'accident
vehic$manv <- as.factor(vehic$manv)
# motorisation
vehic$motor <- as.factor(vehic$motor)
## Base usagers
# catégorie de l'usager
usagers$catu <- as.factor(usagers$catu)
# gravité de l'accident
usagers$grav <- as.factor(usagers$grav)
# sexe
usagers$sexe <- as.factor(usagers$sexe)
# type de trajet
usagers$trajet <- as.factor(usagers$trajet)
### Valeurs manquantes et aberrantes
# Base caracteristiques
va <- which(carac$atm==-1)
va2 <- which(carac$col==-1)
va3 <-which(is.nan(carac$adr) | carac$adr=="-")
carac<-carac[-c(va, va2, va3),]
# Base lieux
ab <- which(lieux$vma<10 | lieux$vma==12 | lieux$vma==42 | lieux$vma>130)
lieux <- lieux[-c(ab),]
lieux$vma <- as.factor(lieux$vma)
lieux$surf <- str_replace_all(lieux$surf, pattern = "-1",
replacement = "9")
### Jointures
carac_lieux <- inner_join(carac,lieux,by="Num_Acc")
lieux_usagers <- inner_join(lieux,usagers,by="Num_Acc")
usagers_vehic <- inner_join(usagers,vehic,by="id_vehicule")
colnames(usagers_vehic)[1] <- "Num_Acc"
var_usagers_vehic <- c("Num_Acc","id_vehicule","grav","catu","sexe","trajet","catv","obs","obsm","manv","motor")
usagers_vehic <- usagers_vehic[,var_usagers_vehic]
df <- inner_join(carac_lieux,usagers_vehic,by="Num_Acc")
df2 <- df
### On passe de 4 à 3 modalités pour grav (hospitalisé et tué sont regroupés)
df2$grav[df2$grav=="2"] <- "3"
df2$grav[df2$grav=="4"] <- "2"
df2$grav <- factor(df2$grav,exclude=NULL)
df2$grav<-droplevels.factor(df2$grav)
View(df2)
### On supprime les identifiants, la date (saisonnalité déjà étudiée), le numéro d'immatriculation et commune
df2<-df2[,-c(1,2,5,20)]
var <- c('grav','catv','catu','obsm','agg','col','obs','catr','sexe','manv','trajet','circ','situ',
'nbv','vma')
dtf <- df2[,var]
set.seed(123)
red<-sample(1:130857, size = 10000, replace = FALSE)
dfred<-df2[red,]
rm(vehic,usagers_vehic,lieux_usagers,lieux,carac,carac_lieux)
rm(ab,va,va2,va3)
modele.forward <- step(object = modele.lourdt,
scope = list(lower = grav ~ 1, upper = formula(modele.lourd$model)),
direction = "forward", k = log(n))
set.seed(123)
red<-sample(1:130857, size = 10000, replace = FALSE)
dfred<-df2[red,]
rownames(dfred)<-1:10000
modele.redcomp<-multinom(formula = grav ~ .,data = dfred, model = TRUE, maxit = 600)   # pour info 22% d'erreur en testant sur une base_test de 7000
modele.redtriv<-multinom(formula = grav ~ 1,data = dfred, model = TRUE, maxit = 600)
modele.forward <- step(object = modele.redtriv,
scope = list(lower = grav ~ 1, upper = formula(modele.redcomp$model)),
direction = "forward",steps=30)   # pas grand changement avec base test 7000
modele.forward <- step(object = modele.redtriv,
scope = list(lower = grav ~ 1, upper = formula(modele.redcomp$model)),
direction = "forward",steps=10)# pas grand changement avec base test 7000
var <- c('grav','catv','catu','obsm','agg','col','obs','catr','sexe','manv','trajet','circ','situ',
'nbv','vma')
dtf <- df2[,var]
### Construction des bases test et train
N <- nrow(dtf)
set.seed(123)
train_id <- sample(1:N, size = 0.7*N, replace = FALSE)
data_train <- dtf[train_id,]
data_test <- dtf[-train_id,]
### Construction des bases test et train
N <- nrow(dtf)
set.seed(123)
train_id <- sample(1:N, size = 0.7*N, replace = FALSE)
data_train <- dtf[train_id,]
data_test <- dtf[-train_id,]
# Encodage
N <- nrow(dtf)
set.seed(123)
train_id <- sample(1:N, size = 0.7*N, replace = FALSE)
data_train <- dtf[train_id,]
data_test <- dtf[-train_id,]
modele.optimal<-multinom(formula = grav ~ ., data = data_train, model = TRUE, maxit = 600)
pred.moda.modele.optimal<- predict(object = modele.optimal , newdata = data_test)
erreur.modele.optimal <- mean(!(pred.moda.modele.optimal == data_test$grav))
erreur.modele.optimal
# Matrice de confusion
conflog <- confusionMatrix(data = factor(pred.moda.modele.optimal), reference = data_test$grav)
# Matrice de confusion
conflog <- confusionMatrix(data = factor(pred.moda.modele.optimal), reference = data_test$grav)
```{r confusionlog, fig.cap = "(ref:confusionlog)", message = FALSE}
table <- data.frame(conflog$table)
plotTable <- table %>%
mutate(goodbad = ifelse(table$Prediction == table$Reference, "bonnes", "mauvaises")) %>%
group_by(Reference) %>%
mutate(prop = Freq/sum(Freq))
ggplot(data = plotTable, mapping = aes(x = Reference, y = Prediction, fill = goodbad, alpha = prop)) +
geom_tile() +
geom_text(aes(label = Freq), vjust = .5, fontface  = "bold", alpha = 1) +
scale_fill_manual(values = c(good = "green", bad = "red")) +
theme_bw() +
xlim(rev(levels(table$Reference))) +
scale_y_discrete(labels=c("Indemne", "Blessé leger", "Tué ou hospitalisé")) +
scale_x_discrete(labels=c("Indemne", "Blessé leger", "Tué ou hospitalisé")) +
labs(fill = "Prédiction")
```{r, include = FALSE}
# Encodage
Y_train <- data_train['grav']
X_train <- data.matrix(fastDummies::dummy_cols(data_train[,-1],remove_selected_columns = TRUE))
Y_test <- data_test['grav']
X_test <- data.matrix(fastDummies::dummy_cols(data_test[,-1],remove_selected_columns = TRUE))
xgb_train = xgb.DMatrix(data=X_train, label=Y_train$grav)
xgb_test = xgb.DMatrix(data=X_test, label=Y_test$grav)
# Prediction
xg_results <- xgboost(data = xgb_train, max_depth = 10, nrounds = 10)
pred_xg <- round(predict(xg_results, xgb_test))
pred_xg[(pred_xg>3)] <- 3
err_xg <- mean(!(pred_xg == Y_test$grav))
err_xg
# Matrice de confusion
conf <- confusionMatrix(data = factor(pred_xg), reference = Y_test$grav)
# Encodage
Y_train <- data_train['grav']
X_train <- data.matrix(fastDummies::dummy_cols(data_train[,-1],remove_selected_columns = TRUE))
Y_test <- data_test['grav']
X_test <- data.matrix(fastDummies::dummy_cols(data_test[,-1],remove_selected_columns = TRUE))
xgb_train = xgb.DMatrix(data=X_train, label=Y_train$grav)
xgb_test = xgb.DMatrix(data=X_test, label=Y_test$grav)
# Prediction
xg_results <- xgboost(data = xgb_train, max_depth = 10, nrounds = 10)
pred_xg <- round(predict(xg_results, xgb_test))
pred_xg[(pred_xg>3)] <- 3
err_xg <- mean(!(pred_xg == Y_test$grav))
err_xg
# Matrice de confusion
conf <- confusionMatrix(data = factor(pred_xg), reference = Y_test$grav)
```{r confusionxgb, fig.cap = "(ref:confusionxgb)", message = FALSE}
table <- data.frame(conf$table)
plotTable <- table %>%
mutate(goodbad = ifelse(table$Prediction == table$Reference, "good", "bad")) %>%
group_by(Reference) %>%
mutate(prop = Freq/sum(Freq))
ggplot(data = plotTable, mapping = aes(x = Reference, y = Prediction, fill = goodbad, alpha = prop)) +
geom_tile() +
geom_text(aes(label = Freq), vjust = .5, fontface  = "bold", alpha = 1) +
scale_fill_manual(values = c(good = "green", bad = "red")) +
theme_bw() +
xlim(rev(levels(table$Reference))) +
scale_y_discrete(labels=c("Indemne", "Blessé leger", "Tué ou hospitalisé")) +
scale_x_discrete(labels=c("Indemne", "Blessé leger", "Tué ou hospitalisé")) +
labs(fill = "Prédiction")
table <- data.frame(conflog$table)
plotTable <- table %>%
mutate(goodbad = ifelse(table$Prediction == table$Reference, "good", "bad")) %>%
group_by(Reference) %>%
mutate(prop = Freq/sum(Freq))
ggplot(data = plotTable, mapping = aes(x = Reference, y = Prediction, fill = goodbad, alpha = prop)) +
geom_tile() +
geom_text(aes(label = Freq), vjust = .5, fontface  = "bold", alpha = 1) +
scale_fill_manual(values = c(good = "green", bad = "red")) +
theme_bw() +
xlim(rev(levels(table$Reference))) +
scale_y_discrete(labels=c("Indemne", "Blessé leger", "Tué ou hospitalisé")) +
scale_x_discrete(labels=c("Indemne", "Blessé leger", "Tué ou hospitalisé")) +
labs(fill = "Prédiction")
table <- data.frame(conflog$table)
plotTable <- table %>%
mutate(goodbad = ifelse(table$Prediction == table$Reference, "good", "bad")) %>%
group_by(Reference) %>%
mutate(prop = Freq/sum(Freq))
ggplot(data = plotTable, mapping = aes(x = Reference, y = Prediction, fill = goodbad, alpha = prop)) +
geom_tile() +
geom_text(aes(label = Freq), vjust = .5, fontface  = "bold", alpha = 1) +
scale_fill_manual(values = c(good = "green", bad = "red")) +
theme_bw() +
xlim(rev(levels(table$Reference))) +
scale_y_discrete(labels=c("Indemne", "Blessé leger", "Tué ou hospitalisé")) +
scale_x_discrete(labels=c("Indemne", "Blessé leger", "Tué ou hospitalisé")) +
labs(fill = "Prédiction")
table <- data.frame(conflog$table)
plotTable <- table %>%
mutate(goodbad = ifelse(table$Prediction == table$Reference, "good", "bad")) %>%
group_by(Reference) %>%
mutate(prop = Freq/sum(Freq))
ggplot(data = plotTable, mapping = aes(x = Reference, y = Prediction, fill = goodbad, alpha = prop)) +
geom_tile() +
geom_text(aes(label = Freq), vjust = .5, fontface  = "bold", alpha = 1) +
scale_fill_manual(values = c(good = "green", bad = "red")) +
theme_bw() +
xlim(rev(levels(table$Reference))) +
scale_y_discrete(labels=c("Indemne", "Blessé leger", "Tué ou hospitalisé")) +
scale_x_discrete(labels=c("Indemne", "Blessé leger", "Tué ou hospitalisé")) +
labs(fill = "Prédiction")
table <- data.frame(conflog$table)
plotTable <- table %>%
mutate(goodbad = ifelse(table$Prediction == table$Reference, "good", "bad")) %>%
group_by(Reference) %>%
mutate(prop = Freq/sum(Freq))
ggplot(data = plotTable, mapping = aes(x = Reference, y = Prediction, fill = goodbad, alpha = prop)) +
geom_tile() +
geom_text(aes(label = Freq), vjust = .5, fontface  = "bold", alpha = 1) +
scale_fill_manual(values = c(good = "green", bad = "red")) +
theme_bw() +
xlim(rev(levels(table$Reference))) +
scale_y_discrete(labels=c("Indemne", "Blessé leger", "Tué ou hospitalisé")) +
scale_x_discrete(labels=c("Indemne", "Blessé leger", "Tué ou hospitalisé")) +
labs(fill = "Prédiction")
table <- data.frame(conflog$table)
plotTable <- table %>%
mutate(goodbad = ifelse(table$Prediction == table$Reference, "good", "bad")) %>%
group_by(Reference) %>%
mutate(prop = Freq/sum(Freq))
ggplot(data = plotTable, mapping = aes(x = Reference, y = Prediction, fill = goodbad, alpha = prop)) +
geom_tile() +
geom_text(aes(label = Freq), vjust = .5, fontface  = "bold", alpha = 1) +
scale_fill_manual(values = c(good = "green", bad = "red")) +
theme_bw() +
xlim(rev(levels(table$Reference))) +
scale_y_discrete(labels=c("Indemne", "Blessé leger", "Tué ou hospitalisé")) +
scale_x_discrete(labels=c("Indemne", "Blessé leger", "Tué ou hospitalisé")) +
labs(fill = "Prédiction")
table <- data.frame(conflog$table)
plotTable <- table %>%
mutate(goodbad = ifelse(table$Prediction == table$Reference, "good", "bad")) %>%
group_by(Reference) %>%
mutate(prop = Freq/sum(Freq))
ggplot(data = plotTable, mapping = aes(x = Reference, y = Prediction, fill = goodbad, alpha = prop)) +
geom_tile() +
geom_text(aes(label = Freq), vjust = .5, fontface  = "bold", alpha = 1) +
scale_fill_manual(values = c(good = "green", bad = "red")) +
theme_bw() +
xlim(rev(levels(table$Reference))) +
scale_y_discrete(labels=c("Indemne", "Blessé leger", "Tué ou hospitalisé")) +
scale_x_discrete(labels=c("Indemne", "Blessé leger", "Tué ou hospitalisé")) +
labs(fill = "Prédiction")
set.seed(123)
red<-sample(1:130857, size = 10000, replace = FALSE)
dfred<-df2[red,]
rownames(dfred)<-1:10000
modele.redcomp<-multinom(formula = grav ~ .,data = dfred, model = TRUE, maxit = 600)   # pour info 22% d'erreur en testant sur une base_test de 7000
modele.redtriv<-multinom(formula = grav ~ 1,data = dfred, model = TRUE, maxit = 600)
modele.backward <- step(object = modele.redtriv,
scope = list(lower = grav ~ 1, upper = formula(modele.redcomp$model)),
direction = "backward",steps=10)
modele.backward <- step(object = modele.redcomp,
scope = list(lower = grav ~ 1, upper = formula(modele.redcomp$model)),
direction = "backward",steps=10)
setwd("~/AccidentsRoutiers/Prediction_Gravite")
modele.backward <- step(object = modele.redcomp,
scope = list(lower = grav ~ 1, upper = formula(modele.redcomp$model)),
direction = "backward",steps=10)
View(df2)
View(df2)
modele.backward
pred.moda.modele.redcomp <- predict(object = modele.redcomp, newdata = dfred)
erreur.modele.redcomp<- mean(!(pred.moda.modele.redcomp == dfred$grav))
erreur.modele.redcomp
set.seed(489231)
red<-sample(1:130857, size = 10000, replace = FALSE)
dfred<-df2[red,]
rownames(dfred)<-1:10000
modele.redcomp<-multinom(formula = grav ~ .,data = dfred, model = TRUE, maxit = 600)   # pour info 32% d'erreur en testant sur une base_test de 7000
modele.redtriv<-multinom(formula = grav ~ 1,data = dfred, model = TRUE, maxit = 600)
pred.moda.modele.redcomp <- predict(object = modele.redcomp, newdata = dfred)
erreur.modele.redcomp<- mean(!(pred.moda.modele.redcomp == dfred$grav))
erreur.modele.redcomp
set.seed(123)
red<-sample(1:130857, size = 10000, replace = FALSE)
dfred<-df2[red,]
rownames(dfred)<-1:10000
modele.redcomp<-multinom(formula = grav ~ .,data = dfred, model = TRUE, maxit = 600)   # pour info 32% d'erreur en testant sur une base_test de 7000 31,93 sur base totale de dfred...testé avec plusieurs seed pour le fun
modele.redcomp<-multinom(formula = grav ~ .,data = dfred, model = TRUE, maxit = 600)   # pour info 32% d'erreur en testant sur une base_test de 7000 31,93 sur base totale de dfred...testé avec plusieurs seed pour le fun
modele.redtriv<-multinom(formula = grav ~ 1,data = dfred, model = TRUE, maxit = 600)
pred.moda.modele.redcomp <- predict(object = modele.redcomp, newdata = dfred)
erreur.modele.redcomp<- mean(!(pred.moda.modele.redcomp == dfred$grav))
erreur.modele.redcomp
